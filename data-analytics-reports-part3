{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "93fdf7ab",
   "metadata": {
    "papermill": {
     "duration": 0.004348,
     "end_time": "2025-08-12T03:07:21.494052",
     "exception": false,
     "start_time": "2025-08-12T03:07:21.489704",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Analytics - Part 3\n",
    "### Serverless Data Engineering Python Pipeline with AWS S3 and Lambda\n",
    "A fully automated, serverless pipeline that ingests, processes, and analyzes public datasets using AWS.\n",
    "\n",
    "---\n",
    "### Workflow\n",
    "- Ingested labor productivity data (BLS) and population data (API) into AWS S3.\n",
    "- Loaded both datasets into Pandas for cleaning and transformation\n",
    "- Analyzed:\n",
    "  - Mean & standard deviation of US population (2013–2018)\n",
    "  - Peak year per labor series\n",
    "  - Merged selected labor productivity data with population figures by year\n",
    "\n",
    "---\n",
    "### Stack\n",
    "- **AWS S3** – Storage for raw and processed data\n",
    "- **AWS Lambda** – Automates data ingestion & sync\n",
    "- **Pandas** – Transformation, merging, and analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e985dfd",
   "metadata": {
    "papermill": {
     "duration": 0.002902,
     "end_time": "2025-08-12T03:07:21.500440",
     "exception": false,
     "start_time": "2025-08-12T03:07:21.497538",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "---\n",
    "### Python packages\n",
    "- `boto3` — AWS SDK; S3 uploads/reads  \n",
    "- `requests` — call the public APIs  \n",
    "- `hashlib` — make file hashes to skip dupes  \n",
    "- `pandas` — clean/reshape data  \n",
    "- `json` — parse/serialize JSON  \n",
    "- `io` — in-memory file buffers  \n",
    "- `kaggle_secrets` — pull keys in Kaggle notebooks\n",
    "\n",
    "\n",
    "### Secret Keys\n",
    "`AWS_ACCESS_KEY_ID` • `AWS_SECRET_ACCESS_KEY` • `AWS_REGION` • `BUCKET_NAME` • `BLS_API_KEY`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38d6eb20",
   "metadata": {
    "papermill": {
     "duration": 0.002764,
     "end_time": "2025-08-12T03:07:21.506284",
     "exception": false,
     "start_time": "2025-08-12T03:07:21.503520",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Connect to AWS S3\n",
    "\n",
    "This section initializes the connection to AWS S3 using credentials stored securely as Kaggle Secrets.  \n",
    "It sets up a boto3 session and client so you can interact with your S3 bucket programmatically."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "99d58259",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T03:07:21.513691Z",
     "iopub.status.busy": "2025-08-12T03:07:21.513386Z",
     "iopub.status.idle": "2025-08-12T03:07:25.046544Z",
     "shell.execute_reply": "2025-08-12T03:07:25.045634Z"
    },
    "papermill": {
     "duration": 3.538942,
     "end_time": "2025-08-12T03:07:25.048195",
     "exception": false,
     "start_time": "2025-08-12T03:07:21.509253",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files in bucket:\n",
      "CUUR0000SA0.json\n",
      "SUUR0000SA0.json\n",
      "bls_data.json\n",
      "datausa_population.json\n",
      "datausa_population_20250806155950.json\n",
      "pr.data.0.Current\n"
     ]
    }
   ],
   "source": [
    "# Load secrets from Kaggle\n",
    "from kaggle_secrets import UserSecretsClient\n",
    "import boto3\n",
    "import pandas as pd\n",
    "import json\n",
    "from io import StringIO\n",
    "\n",
    "# Initialize secret client\n",
    "user_secrets = UserSecretsClient()\n",
    "\n",
    "AWS_ACCESS_KEY_ID = user_secrets.get_secret(\"AWS_ACCESS_KEY_ID\")\n",
    "AWS_SECRET_ACCESS_KEY = user_secrets.get_secret(\"AWS_SECRET_ACCESS_KEY\")\n",
    "AWS_REGION = user_secrets.get_secret(\"AWS_REGION\")\n",
    "BUCKET_NAME = user_secrets.get_secret(\"BUCKET_NAME\")\n",
    "\n",
    "# --- AWS Session Setup ---\n",
    "session = boto3.Session(\n",
    "    aws_access_key_id=AWS_ACCESS_KEY_ID,\n",
    "    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,\n",
    "    region_name=AWS_REGION\n",
    ")\n",
    "s3 = session.client(\"s3\")\n",
    "\n",
    "# Verify AWS S3 is connected with file names:\n",
    "response = s3.list_objects_v2(Bucket=BUCKET_NAME)\n",
    "if 'Contents' in response:\n",
    "    print(\"Files in bucket:\")\n",
    "    for obj in response['Contents']:\n",
    "        print(obj['Key'])\n",
    "else:\n",
    "    print(\"Bucket is empty or path is wrong.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "242a7830",
   "metadata": {
    "papermill": {
     "duration": 0.003005,
     "end_time": "2025-08-12T03:07:25.054578",
     "exception": false,
     "start_time": "2025-08-12T03:07:25.051573",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Load S3 Data into DataFrames\n",
    "Load the CSV file (`pr.data.0.Current`) and the JSON file (`datausa_population.json`) from AWS S3 into Pandas DataFrames for processing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6ac54d4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T03:07:25.062714Z",
     "iopub.status.busy": "2025-08-12T03:07:25.061703Z",
     "iopub.status.idle": "2025-08-12T03:07:25.791600Z",
     "shell.execute_reply": "2025-08-12T03:07:25.790811Z"
    },
    "papermill": {
     "duration": 0.735502,
     "end_time": "2025-08-12T03:07:25.793177",
     "exception": false,
     "start_time": "2025-08-12T03:07:25.057675",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BLS Data Shape:  (37182, 5)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>series_id</th>\n",
       "      <th>year</th>\n",
       "      <th>period</th>\n",
       "      <th>value</th>\n",
       "      <th>footnote_codes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PRS30006011</td>\n",
       "      <td>1995</td>\n",
       "      <td>Q01</td>\n",
       "      <td>2.6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PRS30006011</td>\n",
       "      <td>1995</td>\n",
       "      <td>Q02</td>\n",
       "      <td>2.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PRS30006011</td>\n",
       "      <td>1995</td>\n",
       "      <td>Q03</td>\n",
       "      <td>0.9</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PRS30006011</td>\n",
       "      <td>1995</td>\n",
       "      <td>Q04</td>\n",
       "      <td>0.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PRS30006011</td>\n",
       "      <td>1995</td>\n",
       "      <td>Q05</td>\n",
       "      <td>1.4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   series_id          year period         value footnote_codes\n",
       "0  PRS30006011        1995    Q01           2.6            NaN\n",
       "1  PRS30006011        1995    Q02           2.1            NaN\n",
       "2  PRS30006011        1995    Q03           0.9            NaN\n",
       "3  PRS30006011        1995    Q04           0.1            NaN\n",
       "4  PRS30006011        1995    Q05           1.4            NaN"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Load the LBS CSV from S3 (it's actually TSV):\n",
    "csv_key = \"pr.data.0.Current\"\n",
    "obj = s3.get_object(Bucket=BUCKET_NAME, Key=csv_key)\n",
    "csv_content = obj[\"Body\"].read().decode(\"utf-8\")\n",
    "\n",
    "# Parse using tab separator:\n",
    "df_bls = pd.read_csv(StringIO(csv_content), sep=\"\\t\")\n",
    "print(\"BLS Data Shape: \", df_bls.shape)\n",
    "df_bls.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "928b5de1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T03:07:25.801826Z",
     "iopub.status.busy": "2025-08-12T03:07:25.801471Z",
     "iopub.status.idle": "2025-08-12T03:07:25.929496Z",
     "shell.execute_reply": "2025-08-12T03:07:25.928316Z"
    },
    "papermill": {
     "duration": 0.134502,
     "end_time": "2025-08-12T03:07:25.931531",
     "exception": false,
     "start_time": "2025-08-12T03:07:25.797029",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Population Data Shape:  (10, 4)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>nation id</th>\n",
       "      <th>nation</th>\n",
       "      <th>year</th>\n",
       "      <th>population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2013</td>\n",
       "      <td>316128839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2014</td>\n",
       "      <td>318857056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2015</td>\n",
       "      <td>321418821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2016</td>\n",
       "      <td>323127515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2017</td>\n",
       "      <td>325719178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2018</td>\n",
       "      <td>327167439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2019</td>\n",
       "      <td>328239523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2021</td>\n",
       "      <td>331893745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2022</td>\n",
       "      <td>333287562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>01000US</td>\n",
       "      <td>United States</td>\n",
       "      <td>2023</td>\n",
       "      <td>334914896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  nation id         nation  year  population\n",
       "0   01000US  United States  2013   316128839\n",
       "1   01000US  United States  2014   318857056\n",
       "2   01000US  United States  2015   321418821\n",
       "3   01000US  United States  2016   323127515\n",
       "4   01000US  United States  2017   325719178\n",
       "5   01000US  United States  2018   327167439\n",
       "6   01000US  United States  2019   328239523\n",
       "7   01000US  United States  2021   331893745\n",
       "8   01000US  United States  2022   333287562\n",
       "9   01000US  United States  2023   334914896"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the population.json file:\n",
    "json_key = \"datausa_population.json\"\n",
    "obj = s3.get_object(Bucket=BUCKET_NAME, Key=json_key)\n",
    "population_data = json.loads(obj['Body'].read().decode('utf-8'))\n",
    "population_data = population_data['data']\n",
    "\n",
    "df_us_year_population = pd.DataFrame(population_data)\n",
    "\n",
    "# Clean white space and column names lower to join data later:\n",
    "df_us_year_population.columns = df_us_year_population.columns.str.strip().str.lower()\n",
    "df_us_year_population['population'] = df_us_year_population['population'].astype(int)\n",
    "\n",
    "print(\"Population Data Shape: \", df_us_year_population.shape)\n",
    "df_us_year_population.head(10) # there are only 10 rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29c0eae3",
   "metadata": {
    "papermill": {
     "duration": 0.006781,
     "end_time": "2025-08-12T03:07:25.943009",
     "exception": false,
     "start_time": "2025-08-12T03:07:25.936228",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Analytics on US Population\n",
    "Using the dataframe from the population data API, here is the mean and the standard deviation of the annual US population across the years [2013, 2018] inclusive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "74afd623",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T03:07:25.954543Z",
     "iopub.status.busy": "2025-08-12T03:07:25.953869Z",
     "iopub.status.idle": "2025-08-12T03:07:25.970269Z",
     "shell.execute_reply": "2025-08-12T03:07:25.969272Z"
    },
    "papermill": {
     "duration": 0.023622,
     "end_time": "2025-08-12T03:07:25.971804",
     "exception": false,
     "start_time": "2025-08-12T03:07:25.948182",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average US population from 2013 to 2018:  322069808\n",
      "Standard deviation during that period:  4158441\n"
     ]
    }
   ],
   "source": [
    "# Filter for years 2013 to 2018\n",
    "filtered_df = df_us_year_population[df_us_year_population['year'].between(2013, 2018)].copy()\n",
    "\n",
    "# Calculate mean and std\n",
    "population_mean = filtered_df['population'].mean()\n",
    "population_std = filtered_df['population'].std()\n",
    "\n",
    "print(\"Average US population from 2013 to 2018: \", round(population_mean))\n",
    "print(\"Standard deviation during that period: \", round(population_std))"
   ]
  },
  {
   "attachments": {
    "7a46d7ac-fb33-4516-a8a9-d31ad8030b60.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "878ed418",
   "metadata": {
    "papermill": {
     "duration": 0.00355,
     "end_time": "2025-08-12T03:07:25.979317",
     "exception": false,
     "start_time": "2025-08-12T03:07:25.975767",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Analytics on BLS API Data\n",
    "Using the time-series BLS dataframe, find the **best year** for each `series_id` — defined as the year with the **maximum total sum** of the `\"value\"` across all quarters. Generate a report listing each `series_id`, its best year, and the total summed value for that year. For example, if the table had these values:  \n",
    "![best.png](attachment:7a46d7ac-fb33-4516-a8a9-d31ad8030b60.png)\n",
    "\n",
    "---\n",
    "\n",
    "### Find Each Series ID's Best Year Based on Total Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e37f43c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T03:07:25.989516Z",
     "iopub.status.busy": "2025-08-12T03:07:25.989215Z",
     "iopub.status.idle": "2025-08-12T03:07:26.019425Z",
     "shell.execute_reply": "2025-08-12T03:07:26.018544Z"
    },
    "papermill": {
     "duration": 0.037196,
     "end_time": "2025-08-12T03:07:26.020717",
     "exception": false,
     "start_time": "2025-08-12T03:07:25.983521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Series_id Best Year DataFrame:  (282, 3)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>series_id</th>\n",
       "      <th>year</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PRS30006011</td>\n",
       "      <td>2022</td>\n",
       "      <td>20.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PRS30006012</td>\n",
       "      <td>2022</td>\n",
       "      <td>17.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PRS30006013</td>\n",
       "      <td>1998</td>\n",
       "      <td>705.895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PRS30006021</td>\n",
       "      <td>2010</td>\n",
       "      <td>17.700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PRS30006022</td>\n",
       "      <td>2010</td>\n",
       "      <td>12.400</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           series_id  year    value\n",
       "0  PRS30006011        2022   20.500\n",
       "1  PRS30006012        2022   17.100\n",
       "2  PRS30006013        1998  705.895\n",
       "3  PRS30006021        2010   17.700\n",
       "4  PRS30006022        2010   12.400"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extra space and lower names needs trimmed\n",
    "df_bls.columns = df_bls.columns.str.strip().str.lower() \n",
    "# Total each series_id by year:\n",
    "df_bls_year = df_bls.groupby(by=['series_id', 'year'])['value'].sum().reset_index()\n",
    "\n",
    "# Each id find their best year:\n",
    "idx = df_bls_year.groupby('series_id')['value'].idxmax()  # This method allows you to keep column names\n",
    "df_bls_best_year = df_bls_year.loc[idx].reset_index(drop=True)\n",
    "\n",
    "# View Data:\n",
    "print(\"Series_id Best Year DataFrame: \", df_bls_best_year.shape)\n",
    "df_bls_best_year.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4036af7f",
   "metadata": {
    "papermill": {
     "duration": 0.003685,
     "end_time": "2025-08-12T03:07:26.028529",
     "exception": false,
     "start_time": "2025-08-12T03:07:26.024844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Generate Report\n",
    "\n",
    "Using both the BLS and Population dataframes, generate a report showing the `value` for `series_id = PRS30006032` and `period = Q01`, along with the corresponding population for that year (if available).\n",
    "\n",
    "Example output row:\n",
    "\n",
    "| series_id   | year | period | value | Population |\n",
    "|-------------|------|--------|-------|------------|\n",
    "| PRS30006032 | 2018 | Q01    | 1.9   | 327167439  |\n",
    "\n",
    "> Perform data cleaning such as trimming whitespace before filtering or joining datasets.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0c6e4ff2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T03:07:26.037568Z",
     "iopub.status.busy": "2025-08-12T03:07:26.036914Z",
     "iopub.status.idle": "2025-08-12T03:07:26.087925Z",
     "shell.execute_reply": "2025-08-12T03:07:26.087089Z"
    },
    "papermill": {
     "duration": 0.056994,
     "end_time": "2025-08-12T03:07:26.089250",
     "exception": false,
     "start_time": "2025-08-12T03:07:26.032256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Has PRS30006032: True\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>series_id</th>\n",
       "      <th>year</th>\n",
       "      <th>period</th>\n",
       "      <th>value</th>\n",
       "      <th>population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>1995</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>1996</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-4.2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>1997</td>\n",
       "      <td>Q01</td>\n",
       "      <td>2.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>1998</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.9</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>1999</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-4.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2000</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2001</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-6.3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2002</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-6.6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2003</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-5.7</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2004</td>\n",
       "      <td>Q01</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2005</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2006</td>\n",
       "      <td>Q01</td>\n",
       "      <td>1.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2007</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-0.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2008</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-3.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2009</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-21.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2010</td>\n",
       "      <td>Q01</td>\n",
       "      <td>3.2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2011</td>\n",
       "      <td>Q01</td>\n",
       "      <td>1.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2012</td>\n",
       "      <td>Q01</td>\n",
       "      <td>2.5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2013</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.5</td>\n",
       "      <td>316128839.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2014</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-0.1</td>\n",
       "      <td>318857056.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2015</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-1.7</td>\n",
       "      <td>321418821.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2016</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-1.4</td>\n",
       "      <td>323127515.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2017</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.9</td>\n",
       "      <td>325719178.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2018</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.5</td>\n",
       "      <td>327167439.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2019</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-1.6</td>\n",
       "      <td>328239523.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2020</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2021</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.7</td>\n",
       "      <td>331893745.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2022</td>\n",
       "      <td>Q01</td>\n",
       "      <td>5.3</td>\n",
       "      <td>333287562.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2023</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.3</td>\n",
       "      <td>334914896.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2024</td>\n",
       "      <td>Q01</td>\n",
       "      <td>-0.7</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>PRS30006032</td>\n",
       "      <td>2025</td>\n",
       "      <td>Q01</td>\n",
       "      <td>0.4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      series_id  year period  value   population\n",
       "0   PRS30006032  1995    Q01    0.0          NaN\n",
       "1   PRS30006032  1996    Q01   -4.2          NaN\n",
       "2   PRS30006032  1997    Q01    2.8          NaN\n",
       "3   PRS30006032  1998    Q01    0.9          NaN\n",
       "4   PRS30006032  1999    Q01   -4.1          NaN\n",
       "5   PRS30006032  2000    Q01    0.5          NaN\n",
       "6   PRS30006032  2001    Q01   -6.3          NaN\n",
       "7   PRS30006032  2002    Q01   -6.6          NaN\n",
       "8   PRS30006032  2003    Q01   -5.7          NaN\n",
       "9   PRS30006032  2004    Q01    2.0          NaN\n",
       "10  PRS30006032  2005    Q01   -0.5          NaN\n",
       "11  PRS30006032  2006    Q01    1.8          NaN\n",
       "12  PRS30006032  2007    Q01   -0.8          NaN\n",
       "13  PRS30006032  2008    Q01   -3.5          NaN\n",
       "14  PRS30006032  2009    Q01  -21.0          NaN\n",
       "15  PRS30006032  2010    Q01    3.2          NaN\n",
       "16  PRS30006032  2011    Q01    1.5          NaN\n",
       "17  PRS30006032  2012    Q01    2.5          NaN\n",
       "18  PRS30006032  2013    Q01    0.5  316128839.0\n",
       "19  PRS30006032  2014    Q01   -0.1  318857056.0\n",
       "20  PRS30006032  2015    Q01   -1.7  321418821.0\n",
       "21  PRS30006032  2016    Q01   -1.4  323127515.0\n",
       "22  PRS30006032  2017    Q01    0.9  325719178.0\n",
       "23  PRS30006032  2018    Q01    0.5  327167439.0\n",
       "24  PRS30006032  2019    Q01   -1.6  328239523.0\n",
       "25  PRS30006032  2020    Q01   -7.0          NaN\n",
       "26  PRS30006032  2021    Q01    0.7  331893745.0\n",
       "27  PRS30006032  2022    Q01    5.3  333287562.0\n",
       "28  PRS30006032  2023    Q01    0.3  334914896.0\n",
       "29  PRS30006032  2024    Q01   -0.7          NaN\n",
       "30  PRS30006032  2025    Q01    0.4          NaN"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n",
    "\n",
    "# Get the only columns needed\n",
    "df_us_year_population = df_us_year_population[['year', 'population']]\n",
    "df_bls = df_bls[['series_id', 'year', 'period', 'value']]\n",
    "df_bls['series_id'] = df_bls['series_id'].astype(str).str.strip() # gets rid of whitespace\n",
    "print(\"Has PRS30006032:\", (df_bls['series_id'] == 'PRS30006032').any())  # Does the series exist?\n",
    "\n",
    "# JOIN  df_us_year_population with original df_bls\n",
    "merged_df = pd.merge(df_bls, df_us_year_population, on='year', how='left')\n",
    "\n",
    "# FILTER the merged_df by series_id = PRS30006032 and period = Q01\n",
    "df_6032 = merged_df[(merged_df['series_id'] == 'PRS30006032') & (merged_df['period'] == 'Q01')]\n",
    "df_6032 = df_6032.reset_index(drop=True)\n",
    "df_6032"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd3e6339",
   "metadata": {
    "papermill": {
     "duration": 0.004003,
     "end_time": "2025-08-12T03:07:26.098477",
     "exception": false,
     "start_time": "2025-08-12T03:07:26.094474",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Submit your analysis, your queries, and the outcome of the reports as a .ipynb file."
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.820382,
   "end_time": "2025-08-12T03:07:26.722047",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-12T03:07:16.901665",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
