import os
eximport requests
import boto3
from botocore.exceptions import ClientError

# ---- CONFIG ----
BUCKET_NAME = "rearc-bls-scott-2025"
BASE_URL = "https://download.bls.gov/pub/time.series/pr/"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (compatible; DataPipeline/1.0; +https://github.com/ScottySchmidt)"
}

FILES = [
    "pr.class",
    "pr.contacts",
    "pr.data.0.Current",
    "pr.data.1.AllData",
    "pr.duration",
    "pr.footnote",
    "pr.measure",
    "pr.period",
    "pr.seasonal",
    "pr.sector",
    "pr.series",
    "pr.txt"
]

# ---- S3 CLIENT ----
s3 = boto3.client("s3")

def download_file(file_name):
    """Download a file from BLS with proper User-Agent."""
    url = BASE_URL + file_name
    response = requests.get(url, headers=HEADERS)
    if response.status_code == 200:
        with open(file_name, "wb") as f:
            f.write(response.content)
        print(f"✅ Downloaded {file_name}")
        return True
    else:
        print(f"Failed to download {file_name}: {response.status_code}")
        return False

def upload_file(file_name):
    """Upload a file to S3, skip if identical already exists."""
    try:
        # Check if file already exists and has same size
        head = s3.head_object(Bucket=BUCKET_NAME, Key=file_name)
        local_size = os.path.getsize(file_name)
        if head['ContentLength'] == local_size:
            print(f"⏩ Skipping {file_name}, already up to date in S3")
            return
    except ClientError:
        # File not found in S3, proceed with upload
        pass

    # Upload new or updated file
    s3.upload_file(file_name, BUCKET_NAME, file_name, ExtraArgs={'ACL': 'public-read'})
    print(f"⬆️ Uploaded {file_name} to S3")

if __name__ == "__main__":
    for f in FILES:
        if download_file(f):
            upload_file(f)
